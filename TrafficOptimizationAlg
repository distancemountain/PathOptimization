package com.huawei.it.optimization.common.TrafficOptimizationUtils;

import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.stream.Collectors;

/**
 * @version :1.0
 * @author: Glory.Y
 * @description: Flow optimization Alg.
 * @since: 2019-3-14
 */

/***
 * .
 */
public class TrafficOptimizationAlg {
    /**
     * .
     */
    private List<Edge> edges;
    /**
     * .
     */
    private List<Vertex> vertices;
    /**
     * .
     */
    private Map<Long, Vertex> vertexMap;
    /**
     * .
     */
    private Map<Long, Edge> edgeMap;
    /**
     * .
     */
    private List<PW> pws;
    /**
     * .
     */
    private List<TunnelLink> tunnelLinks;
    /**
     * .
     */
    private List<PWUtilization> pwUtilizations;
    /**
     * .
     */
    private double threshold;
    /**
     * .
     */
    private int optimizationMode;
    /**
     * .
     */
    private OptimizationPolicy optimizationPolicy;

    /**
     * @param vertices1         vertices1
     * @param edges1            edges1
     * @param pws1              pws1
     * @param tunnelLinks1      tunnelLinks1
     * @param pwUtilizations1   pwUtilizations1
     * @param threshold1        threshold1
     * @param optimizationMode1 optimizationMode1
     */
    public TrafficOptimizationAlg(final List<Vertex> vertices1,
                                  final List<Edge> edges1,
                                  final List<PW> pws1,
                                  final List<TunnelLink> tunnelLinks1,
                                  final List<PWUtilization> pwUtilizations1,
                                  final double threshold1,
                                  final int optimizationMode1) {
        this.vertices = vertices1;
        this.edges = edges1;
        this.pws = pws1;
        this.tunnelLinks = tunnelLinks1;
        this.pwUtilizations = pwUtilizations1;
        this.threshold = threshold1;
        this.optimizationMode = optimizationMode1;
        vertexMap = vertices.stream().collect(Collectors.toMap(Vertex::getId,
                a -> a, (k1, k2) -> k1));
        edgeMap = edges.stream().collect(Collectors.toMap(
                Edge::getId, a -> a, (k1, k2) -> k1));
    }

    /**
     * entrance function.
     * @param linkIds linkIds
     * @param optimizationPolicy1 optimizationPolicy
     * @return list
     */
    public List<TrafficOptimizationResult> optimizationAll(
            final List<Long> linkIds,
            final OptimizationPolicy optimizationPolicy1) {
        List<TrafficOptimizationResult> trafficOptimizationResults =
                new ArrayList<>();
        initLinkUtilization();
        buildGraph(vertices, edges);
        for (Long linkId : linkIds) {
            TrafficOptimizationResult trafficOptimizationResult =
                    optimizationLink(linkId);
            trafficOptimizationResults.add(trafficOptimizationResult);
        }
        return trafficOptimizationResults;
    }

    /**
     * @param linkId linkId
     * @return list
     */
    private TrafficOptimizationResult optimizationLink(final long linkId) {
        List<TrafficOptimizationLog> trafficOptimizationLogs =
                new ArrayList<>();
        List<PW> pwList = getPWListByLink(linkId);
        List<PW> optimizationPws = rankoptimizationPWs(pwList, optimizationPolicy);
        Edge optimizationEdge = edgeMap.get(linkId);
        int code = 0;
        double totalOptimizationFlow = 0;
        double planOptimizeFlow = 0;
        for (PW pw : optimizationPws) {
            Vertex accessVertex = vertexMap.get(pw.getWorkaNeId());
            Vertex l23Vertex = vertexMap.get(pw.getWorkzNeId());
            double optimizationFlow = getPwFlow(pw);
            long tunnelId = pw.getWorkUpTunnelId();
            accessVertex.setDistance(0);
            accessVertex.getVertexPath().add(accessVertex);
            Queue<Vertex> queue = new LinkedList<>();
            queue.offer(accessVertex);
            while (!queue.isEmpty()) {
                Vertex vertex = queue.poll();
                List<Vertex> neighbourVertices = vertex.getNeighbourVertex();
                List<Edge> neighbourEdges = vertex.getNeighbourEdge();
                for (int i = 0; i < neighbourVertices.size(); i++) {
                    Vertex neighbourVertex = neighbourVertices.get(i);
                    Edge neighbourEdge = neighbourEdges.get(i);
                    if (isTurnOff(neighbourEdge, optimizationFlow)) {
                        continue;
                    }
                    if (neighbourVertex.getDistance() == Constant.INFINITY) {
                        queue.offer(neighbourVertex);
                    }
                    updateDistance(vertex, neighbourVertex, neighbourEdge);
                }
            }
            TrafficOptimizationLog trafficOptimizationLog =
                    new TrafficOptimizationLog();
            trafficOptimizationLog.setLinkId(linkId);
            trafficOptimizationLog.setPwId(pw.getId());
            trafficOptimizationLog.setCityId(pw.getCityId());
            trafficOptimizationLog.setTunnelId(tunnelId);
            if (l23Vertex.getDistance() == Constant.INFINITY) {
                trafficOptimizationLog.setCode(Constant.OPTIMIZATION_RESULT_FAILURE);
            } else {
                trafficOptimizationLog.setCode(Constant.OPTIMIZATION_RESULT_SUCCESS);
                List<Edge> edgePath = l23Vertex.getEdgePath();
                List<Long> beforeLinks = new ArrayList<>();
                List<Long> afterLinks = new ArrayList<>();
                List<TunnelLink> beforeTunnelLink =
                        tunnelLinks.stream().filter((p) -> p.getTunnelId() == tunnelId)
                                .collect(Collectors.toList());
                beforeTunnelLink.forEach((p) -> beforeLinks.add(p.getLinkId()));
                trafficOptimizationLog.setBeforeLinks(beforeLinks);
                edgePath.forEach((p) -> afterLinks.add(p.getId()));
                trafficOptimizationLog.setAfterLinks(afterLinks);
                trafficOptimizationLog.setLinkInitRate(optimizationEdge.getInitRate());
                trafficOptimizationLog.setReduceUtilization(optimizationFlow);
                totalOptimizationFlow += optimizationFlow;
            }
            trafficOptimizationLogs.add(trafficOptimizationLog);
            if (totalOptimizationFlow >= planOptimizeFlow) {
                break;
            }
        }
        TrafficOptimizationResult trafficOptimizationResult =
                new TrafficOptimizationResult();
        if (totalOptimizationFlow == 0) {
            code = Constant.OPTIMIZATION_RESULT_FAILURE;
        } else if (totalOptimizationFlow > planOptimizeFlow) {
            code = Constant.OPTIMIZATION_RESULT_SUCCESS;
        } else {
            code = Constant.OPTIMIZATION_RESULT_PORTION;
        }
        trafficOptimizationResult.setCode(code);
        trafficOptimizationResult.setTrafficOptimizationLogs(trafficOptimizationLogs);
        return trafficOptimizationResult;
    }

    /**
     * construct graph.
     *
     * @param vertices1 ver
     * @param edges1    ded
     */
    private void buildGraph(List<Vertex> vertices1, List<Edge> edges1) {
        vertices1.forEach((p) -> {
            p.setEdgePath(new ArrayList<>());
            p.setVertexPath(new ArrayList<>());
            p.setNeighbourEdge(new ArrayList<>());
            p.setNeighbourVertex(new ArrayList<>());
            p.setDistance(Constant.INFINITY);
        });

        edges1.forEach((p) -> {
            p.setWeight(Constant.EDGE_NORMAL_WIGHT);
        });

        for (Edge edge : edges1) {
            long aId = edge.getaNeId();
            long zId = edge.getzNeId();
            Vertex aVertex = vertexMap.get(aId);
            Vertex zVertex = vertexMap.get(zId);
            List<Vertex> aVertexList = aVertex.getNeighbourVertex();
            aVertexList.add(zVertex);
            List<Vertex> zVertexList = zVertex.getNeighbourVertex();
            zVertexList.add(aVertex);
            List<Edge> aEdgeList = aVertex.getNeighbourEdge();
            aEdgeList.add(edge);
            List<Edge> zEdgeList = zVertex.getNeighbourEdge();
            zEdgeList.add(edge);
        }
    }

    /**
     * @param linkId linkId
     * @return list
     */
    private List<PW> getPWListByLink(final long linkId) {
        List<TunnelLink> tunnelLinkList =
                tunnelLinks.stream().filter((p) -> p.getLinkId() == linkId)
                        .collect(Collectors.toList());
        List<Long> tunnelLinkIds = new ArrayList<>();
        tunnelLinks.forEach((p) -> {
            tunnelLinkIds.add(p.getTunnelId());
        });

        List<PW> pwList =
                pws.stream().filter((p) -> tunnelLinkIds
                        .contains(p.getWorkUpTunnelId()))
                        .collect(Collectors.toList());
        return pwList;
    }

    /**
     * @param pws1                pws
     * @param optimizationPolicy1 optimizationPolicy
     * @return list
     */
    private List<PW> rankoptimizationPWs(final List<PW> pws1,
                                         final OptimizationPolicy optimizationPolicy1) {
        if (optimizationPolicy1 == null) {
            return pws1;
        }
        return pws1;
    }

    /**
     * @param vertex          v
     * @param neighbourVertex n
     * @param edge            e
     */
    private void updateDistance(
            Vertex vertex,
            Vertex neighbourVertex,
            final Edge edge) {
        if (neighbourVertex.getDistance()
                > vertex.getDistance() + edge.getWeight()) {
            neighbourVertex
                    .setDistance(vertex.getDistance() + edge.getWeight());
            List<Edge> edgePath = vertex.getEdgePath();
            List<Vertex> vertexPath = vertex.getVertexPath();
            edgePath.add(edge);
            vertexPath.add(neighbourVertex);
            neighbourVertex.setEdgePath(edgePath);
            neighbourVertex.setVertexPath(vertexPath);
        }
    }

    /**
     * @param edge             e
     * @param optimizationFlow o
     * @return b
     */
    private boolean isTurnOff(
            final Edge edge,
            final double optimizationFlow) {
        double utilization = 0;
        if (optimizationMode == Constant.OPTIMIZATION_MODE_AVG) {
            utilization = edge.getUtilizationAvg();
        } else {
            utilization = edge.getUtilizationPeak();
        }
        return edge.getRate() * threshold < optimizationFlow + utilization;
    }

    /**
     * @param pw pw
     * @return d
     */
    private double getPwFlow(final PW pw) {
        for (PWUtilization pwUtilization : pwUtilizations) {
            if (pwUtilization.getPwId() == pw.getId()) {
                if (optimizationMode == Constant.OPTIMIZATION_MODE_AVG) {
                    return max(pwUtilization.getAzFlowAvg(),
                            pwUtilization.getZaFlowAvg());
                } else {
                    return max(pwUtilization.getAzFlowPeak(),
                            pwUtilization.getZaFlowPeak());
                }
            }
        }
        return 0;
    }

    /**
     * @param d1 d1
     * @param d2 d2
     * @return d
     */
    private double max(final double d1, final double d2) {
        if (d1 > d2) {
            return d1;
        }
        return d2;
    }

    /**
     * initLinkUtilization.
     */
    private void initLinkUtilization() {
        for (PWUtilization pwUtilization : pwUtilizations) {
            List<TunnelLink> tunnelLinkList =
                    tunnelLinks.stream().filter((p) -> p.getTunnelId()
                            == pwUtilization.getAzTunnelId()).collect(Collectors.toList());
            for (TunnelLink tunnelLink : tunnelLinkList) {
                Edge edge = edgeMap.get(tunnelLink.getLinkId());
                edge.setRecUtilizationAvg(pwUtilization.getZaFlowAvg()
                        + edge.getRecUtilizationAvg());
                edge.setRecUtilizationPeak(pwUtilization.getZaFlowPeak()
                        + edge.getRecUtilizationPeak());
                edge.setTransUtilizationAvg(pwUtilization.getAzFlowAvg()
                        + edge.getTransUtilizationAvg());
                edge.setTransUtilizationPeak(pwUtilization.getAzFlowPeak()
                        + edge.getTransUtilizationPeak());
            }
        }

        edges.forEach((p) -> p.setUtilizationAvg(max(p.getRecUtilizationAvg(),
                p.getTransUtilizationAvg())));

        edges.forEach((p) -> p.setUtilizationPeak(max(p.getRecUtilizationPeak(),
                p.getTransUtilizationPeak())));
    }
}
